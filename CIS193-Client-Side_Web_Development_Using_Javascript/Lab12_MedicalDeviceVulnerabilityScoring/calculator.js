function updateScore() 
{
    // Get each section heading
    let sections = document.querySelectorAll("h4");
    // Loop through each section
    for(let section of sections)
    {
        // Grab the name value for each of the buttons in this section
        let sectionName = section.nextElementSibling.name; 
        // Make a variable for the query selector for all the buttons in this section
        let sectionSelector = "input[name='" + sectionName +"']"
        // Loop through all the buttons for this section
        let sectionButtons = document.querySelectorAll(sectionSelector);
        for(let i = 1; i <= sectionButtons.length; i++)
        {
            // If a button is selected, exit this loop and move on to the next section
            if(sectionButtons[i-1].checked == true)
            {
                break;
            }
            // If no buttons were selected exit this function with a return value of false.
            else if(i == sectionButtons.length)
            {
                return false;
            }
        }
    }
    // Return true if all sections have a button checked
    return true;
}

// Get an array of all the buttons
let buttons = document.querySelectorAll("input");

for(let button of buttons)
{
    // Whenever a button is clicked, check if all sections have a button selected
    button.onclick = function(){
        if(updateScore() == true)
        {
            // Hide the warning label
            document.querySelector("#warning").style.display = "none";

            // Compute vulnerability score
            let scopeStatus = getButtonValue("scope"); // Initialize this as the button value then change below
            if(scopeStatus == "Unchanged")
            {
                scopeStatus = 1.0;
            }
            else
            {
                scopeStatus = 1.08;
            }

            const levelConfidentiality = getButtonValue("conf");
            const levelSensitivity = getButtonValue("sens");
            let baseConfidentiality = 0; // Initialize this at 0 and change below
            if(levelConfidentiality == "None")
            {
                baseConfidentiality = 0.00;
            }
            else if(levelConfidentiality == "Low")
            {
                if(levelSensitivity == "None")
                {
                    baseConfidentiality = 0.22;
                }
                else if(levelSensitivity == "Low")
                {
                    baseConfidentiality = 0.65;
                }
                else
                {
                    baseConfidentiality = 0.85;
                }
            }
            else
            {
                if(levelSensitivity == "None")
                {
                    baseConfidentiality = 0.56;
                }
                else if(levelSensitivity == "Low")
                {
                    baseConfidentiality = 0.75;
                }
                else
                {
                    baseConfidentiality = 0.95;
                }
            }

            let baseIntegrity = 0; // Initialize this at 0 and change below
            const levelHealthImpact = getButtonValue("health");
            const levelIntegrity = getButtonValue("integ");
            if(levelIntegrity == "None")
            {
                if(levelHealthImpact == "None")
                {
                    baseIntegrity = 0.00;
                }
                else if(levelHealthImpact == "Low")
                {
                    baseIntegrity = 0.55;
                }
                else
                {
                    baseIntegrity = 0.85;
                }
            }
            else if(levelIntegrity == "Low")
            {
                if(levelHealthImpact == "None")
                {
                    baseIntegrity = 0.22;
                }
                else if(levelHealthImpact == "Low")
                {
                    baseIntegrity = 0.60;
                }
                else
                {
                    baseIntegrity = 0.90;
                }
            }
            else
            {
                if(levelHealthImpact == "None")
                {
                    baseIntegrity = 0.56;
                }
                else if(levelHealthImpact == "Low")
                {
                    baseIntegrity = 0.75;
                }
                else
                {
                    baseIntegrity = 0.95;
                }
            }

            let baseAvailability = 0; // Initialize this at 0 and change below
            const levelAvailability = getButtonValue("avail");
            if(levelAvailability == "None")
            {
                if(levelHealthImpact == "None")
                {
                    baseAvailability = 0.00;
                }
                else if(levelHealthImpact == "Low")
                {
                    baseAvailability = 0.55;
                }
                else
                {
                    baseAvailability = 0.85;
                }
            }
            else if(levelAvailability == "Low")
            {
                if(levelHealthImpact == "None")
                {
                    baseAvailability = 0.22;
                }
                else if(levelHealthImpact == "Low")
                {
                    baseAvailability = 0.60;
                }
                else
                {
                    baseAvailability = 0.90;
                }
            }
            else
            {
                if(levelHealthImpact == "None")
                {
                    baseAvailability = 0.56;
                }
                else if(levelHealthImpact == "Low")
                {
                    baseAvailability = 0.65;
                }
                else
                {
                    baseAvailability = 0.95;
                }
            }

            let attackVector = getButtonValue("AV"); // Initialize this as the button value then change below
            if(attackVector == "Network")
            {
                attackVector = 0.85;
            }
            else if(attackVector == "Adjacent Network")
            {
                attackVector = 0.62;
            }
            else if(attackVector == "Local")
            {
                attackVector = 0.55;
            }
            else
            {
                attackVector = 0.20;
            }

            let attackComplexity = getButtonValue("AC"); // Initialize this as the button value then change below
            if(attackComplexity == "Low")
            {
                attackComplexity = 0.77;
            }
            else
            {
                attackComplexity = 0.44;
            }

            let privilegeRequired = getButtonValue("PR"); // Initialize this as the button value then change below
            if(privilegeRequired == "None")
            {
                privilegeRequired = 0.85;
            }
            else if(privilegeRequired == "Low")
            {
                privilegeRequired = 0.62;
            }
            else
            {
                privilegeRequired = 0.27;
            }

            let userInteraction = getButtonValue("UI"); // Initialize this as the button value then change below
            if(userInteraction == "None")
            {
                userInteraction = 0.85;
            }
            else
            {
                userInteraction = 0.62;
            }

            // Calculate score
            const scoreBase = baseConfidentiality + baseIntegrity + baseAvailability;
            const scoreExploitability = attackVector * attackComplexity * privilegeRequired * userInteraction;
            let score = 0;
            // If scoreBase is 0, then final score should also be 0
            if(scoreBase == 0)
            {
                score = 0;
            }
            else
            {
                // Score equation
                score = scopeStatus * ((3.326258289 * scoreBase) + (1.1 * scoreExploitability));
                // Round up to the tenths decimal place
                score = Math.ceil(10 * score) / 10;
            }

            // Score cannot exceed 10
            if(score > 10)
            {
                score = 10;
            }

            // Always show one decimal value
            score = score.toFixed(1);

            // Display vulnerability score in score div
            document.querySelector("#score").innerText = score;
        }
    };
}

function getButtonValue(buttonName)
{
    // Select the checked button for this section
    let buttonSelector = "input[name='" + buttonName +"']:checked";
    // Return the innter text of the selected button's label
    let buttonValue = document.querySelector(buttonSelector).nextElementSibling.innerText;
    return buttonValue;
}